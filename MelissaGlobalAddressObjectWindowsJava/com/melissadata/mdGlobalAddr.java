/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.melissadata;

public class mdGlobalAddr {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected mdGlobalAddr(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(mdGlobalAddr obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mdGlobalAddrJavaWrapperJNI.delete_mdGlobalAddr(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public mdGlobalAddr() {
    this(mdGlobalAddrJavaWrapperJNI.new_mdGlobalAddr(), true);
  }

  public boolean SetLicenseString(String arg0) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_SetLicenseString(swigCPtr, this, arg0);
  }

  public void SetPathToGlobalAddrFiles(String arg0) {
    mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_SetPathToGlobalAddrFiles(swigCPtr, this, arg0);
  }

  public mdGlobalAddr.ProgramStatus InitializeDataFiles() {
    return mdGlobalAddr.ProgramStatus.swigToEnum(mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_InitializeDataFiles(swigCPtr, this));
  }

  public void ClearProperties() {
    mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_ClearProperties(swigCPtr, this);
  }

  public boolean SetInputParameter(String pszParamName, String pszParamValue) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_SetInputParameter(swigCPtr, this, pszParamName, pszParamValue);
  }

  public int VerifyAddress() {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_VerifyAddress(swigCPtr, this);
  }

  public String GetOutputParameter(String pszParamName) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_GetOutputParameter(swigCPtr, this, pszParamName);
  }

  public String TransliterateText(String pszInput, String pszInputScript, String pszOutputScript) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_TransliterateText(swigCPtr, this, pszInput, pszInputScript, pszOutputScript);
  }

  public String GetCurrentAtomSet() {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_GetCurrentAtomSet(swigCPtr, this);
  }

  public String InputsAsAtomSet() {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_InputsAsAtomSet(swigCPtr, this);
  }

  public String RightFieldResultsAsAtomSet(String pszAtomSet) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_RightFieldResultsAsAtomSet(swigCPtr, this, pszAtomSet);
  }

  public String TokenizerResultsAsAtomSet(String pszAtomSet) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_TokenizerResultsAsAtomSet(swigCPtr, this, pszAtomSet);
  }

  public String InputMapperResultsAsAtomSet(String pszAtomSetArray) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_InputMapperResultsAsAtomSet(swigCPtr, this, pszAtomSetArray);
  }

  public String MatchEngineResultsAsAtomSet(String pszAtomSetArray) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_MatchEngineResultsAsAtomSet(swigCPtr, this, pszAtomSetArray);
  }

  public String OutputMappingResultsAsAtomSet(String pszAtomSet) {
    return mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_OutputMappingResultsAsAtomSet(swigCPtr, this, pszAtomSet);
  }

  public void SetOutputsFromAtomSet(String pszAtomSet) {
    mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_SetOutputsFromAtomSet(swigCPtr, this, pszAtomSet);
  }

  public final static class ProgramStatus {
    public final static mdGlobalAddr.ProgramStatus ErrorNone = new mdGlobalAddr.ProgramStatus("ErrorNone", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_ErrorNone_get());
    public final static mdGlobalAddr.ProgramStatus ErrorOther = new mdGlobalAddr.ProgramStatus("ErrorOther");
    public final static mdGlobalAddr.ProgramStatus ErrorOutOfMemory = new mdGlobalAddr.ProgramStatus("ErrorOutOfMemory");
    public final static mdGlobalAddr.ProgramStatus ErrorRequiredFileNotFound = new mdGlobalAddr.ProgramStatus("ErrorRequiredFileNotFound");
    public final static mdGlobalAddr.ProgramStatus ErrorFoundOldFile = new mdGlobalAddr.ProgramStatus("ErrorFoundOldFile");
    public final static mdGlobalAddr.ProgramStatus ErrorDatabaseExpired = new mdGlobalAddr.ProgramStatus("ErrorDatabaseExpired");
    public final static mdGlobalAddr.ProgramStatus ErrorLicenseExpired = new mdGlobalAddr.ProgramStatus("ErrorLicenseExpired");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ProgramStatus swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ProgramStatus.class + " with value " + swigValue);
    }

    private ProgramStatus(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ProgramStatus(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ProgramStatus(String swigName, ProgramStatus swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ProgramStatus[] swigValues = { ErrorNone, ErrorOther, ErrorOutOfMemory, ErrorRequiredFileNotFound, ErrorFoundOldFile, ErrorDatabaseExpired, ErrorLicenseExpired };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AccessType {
    public final static mdGlobalAddr.AccessType Local = new mdGlobalAddr.AccessType("Local", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_Local_get());
    public final static mdGlobalAddr.AccessType Remote = new mdGlobalAddr.AccessType("Remote");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AccessType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AccessType.class + " with value " + swigValue);
    }

    private AccessType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AccessType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AccessType(String swigName, AccessType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AccessType[] swigValues = { Local, Remote };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DiacriticsMode {
    public final static mdGlobalAddr.DiacriticsMode Auto = new mdGlobalAddr.DiacriticsMode("Auto", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_Auto_get());
    public final static mdGlobalAddr.DiacriticsMode On = new mdGlobalAddr.DiacriticsMode("On");
    public final static mdGlobalAddr.DiacriticsMode Off = new mdGlobalAddr.DiacriticsMode("Off");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DiacriticsMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DiacriticsMode.class + " with value " + swigValue);
    }

    private DiacriticsMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DiacriticsMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DiacriticsMode(String swigName, DiacriticsMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DiacriticsMode[] swigValues = { Auto, On, Off };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class StandardizeMode {
    public final static mdGlobalAddr.StandardizeMode ShortFormat = new mdGlobalAddr.StandardizeMode("ShortFormat", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_ShortFormat_get());
    public final static mdGlobalAddr.StandardizeMode LongFormat = new mdGlobalAddr.StandardizeMode("LongFormat");
    public final static mdGlobalAddr.StandardizeMode AutoFormat = new mdGlobalAddr.StandardizeMode("AutoFormat");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static StandardizeMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + StandardizeMode.class + " with value " + swigValue);
    }

    private StandardizeMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private StandardizeMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private StandardizeMode(String swigName, StandardizeMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static StandardizeMode[] swigValues = { ShortFormat, LongFormat, AutoFormat };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SuiteParseMode {
    public final static mdGlobalAddr.SuiteParseMode ParseSuite = new mdGlobalAddr.SuiteParseMode("ParseSuite", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_ParseSuite_get());
    public final static mdGlobalAddr.SuiteParseMode CombineSuite = new mdGlobalAddr.SuiteParseMode("CombineSuite");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SuiteParseMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SuiteParseMode.class + " with value " + swigValue);
    }

    private SuiteParseMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SuiteParseMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SuiteParseMode(String swigName, SuiteParseMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SuiteParseMode[] swigValues = { ParseSuite, CombineSuite };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AliasPreserveMode {
    public final static mdGlobalAddr.AliasPreserveMode ConvertAlias = new mdGlobalAddr.AliasPreserveMode("ConvertAlias", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_ConvertAlias_get());
    public final static mdGlobalAddr.AliasPreserveMode PreserveAlias = new mdGlobalAddr.AliasPreserveMode("PreserveAlias");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AliasPreserveMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AliasPreserveMode.class + " with value " + swigValue);
    }

    private AliasPreserveMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AliasPreserveMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AliasPreserveMode(String swigName, AliasPreserveMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AliasPreserveMode[] swigValues = { ConvertAlias, PreserveAlias };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AutoCompletionMode {
    public final static mdGlobalAddr.AutoCompletionMode AutoCompleteSingleSuite = new mdGlobalAddr.AutoCompletionMode("AutoCompleteSingleSuite", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_AutoCompleteSingleSuite_get());
    public final static mdGlobalAddr.AutoCompletionMode AutoCompleteRangedSuite = new mdGlobalAddr.AutoCompletionMode("AutoCompleteRangedSuite");
    public final static mdGlobalAddr.AutoCompletionMode AutoCompletePlaceHolderSuite = new mdGlobalAddr.AutoCompletionMode("AutoCompletePlaceHolderSuite");
    public final static mdGlobalAddr.AutoCompletionMode AutoCompleteNoSuite = new mdGlobalAddr.AutoCompletionMode("AutoCompleteNoSuite");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AutoCompletionMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AutoCompletionMode.class + " with value " + swigValue);
    }

    private AutoCompletionMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AutoCompletionMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AutoCompletionMode(String swigName, AutoCompletionMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AutoCompletionMode[] swigValues = { AutoCompleteSingleSuite, AutoCompleteRangedSuite, AutoCompletePlaceHolderSuite, AutoCompleteNoSuite };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ResultCdDescOpt {
    public final static mdGlobalAddr.ResultCdDescOpt ResultCodeDescriptionLong = new mdGlobalAddr.ResultCdDescOpt("ResultCodeDescriptionLong", mdGlobalAddrJavaWrapperJNI.mdGlobalAddr_ResultCodeDescriptionLong_get());
    public final static mdGlobalAddr.ResultCdDescOpt ResultCodeDescriptionShort = new mdGlobalAddr.ResultCdDescOpt("ResultCodeDescriptionShort");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ResultCdDescOpt swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ResultCdDescOpt.class + " with value " + swigValue);
    }

    private ResultCdDescOpt(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ResultCdDescOpt(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ResultCdDescOpt(String swigName, ResultCdDescOpt swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ResultCdDescOpt[] swigValues = { ResultCodeDescriptionLong, ResultCodeDescriptionShort };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
